// Mocks generated by Mockito 5.1.0 from annotations
// in ditonton/test/watchlist/presentation/bloc/tv_series/watchlist_tv_series_bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:bloc/bloc.dart' as _i6;
import 'package:core/utils/failure.dart' as _i8;
import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:tv_series/domain/entities/tv.dart' as _i9;
import 'package:tv_series/domain/entities/tv_series_detail.dart' as _i12;
import 'package:tv_series/domain/repositories/tv_series_repository.dart' as _i4;
import 'package:watchlist/domain/usecases/tv_series/get_watchlist_status_tv_series.dart'
    as _i10;
import 'package:watchlist/domain/usecases/tv_series/get_watchlist_tv_series.dart'
    as _i7;
import 'package:watchlist/domain/usecases/tv_series/remove_watchlist_tv_series.dart'
    as _i13;
import 'package:watchlist/domain/usecases/tv_series/save_watchlist_tv_series.dart'
    as _i11;
import 'package:watchlist/presentation/bloc/tv_series/watchlist_tv_series_bloc.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeWatchlistTvSeriesState_0 extends _i1.Fake
    implements _i2.WatchlistTvSeriesState {}

class _FakeEither_1<L, R> extends _i1.Fake implements _i3.Either<L, R> {}

class _FakeTvSeriesRepository_2 extends _i1.Fake
    implements _i4.TvSeriesRepository {}

/// A class which mocks [WatchlistTvSeriesBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockWatchlistTvSeriesBloc extends _i1.Mock
    implements _i2.WatchlistTvSeriesBloc {
  MockWatchlistTvSeriesBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.WatchlistTvSeriesState get state =>
      (super.noSuchMethod(Invocation.getter(#state),
              returnValue: _FakeWatchlistTvSeriesState_0())
          as _i2.WatchlistTvSeriesState);
  @override
  _i5.Stream<_i2.WatchlistTvSeriesState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i2.WatchlistTvSeriesState>.empty())
          as _i5.Stream<_i2.WatchlistTvSeriesState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void add(_i2.WatchlistTvSeriesEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i2.WatchlistTvSeriesEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  void emit(_i2.WatchlistTvSeriesState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i2.WatchlistTvSeriesEvent>(
          _i6.EventHandler<E, _i2.WatchlistTvSeriesState>? handler,
          {_i6.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i6.Transition<_i2.WatchlistTvSeriesEvent,
                  _i2.WatchlistTvSeriesState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i5.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  void onChange(_i6.Change<_i2.WatchlistTvSeriesState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}

/// A class which mocks [GetWatchlistTvSeries].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetWatchlistTvSeries extends _i1.Mock
    implements _i7.GetWatchlistTvSeries {
  MockGetWatchlistTvSeries() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.Either<_i8.Failure, List<_i9.Tv>>> execute() =>
      (super.noSuchMethod(Invocation.method(#execute, []),
              returnValue: Future<_i3.Either<_i8.Failure, List<_i9.Tv>>>.value(
                  _FakeEither_1<_i8.Failure, List<_i9.Tv>>()))
          as _i5.Future<_i3.Either<_i8.Failure, List<_i9.Tv>>>);
}

/// A class which mocks [GetWatchListStatusTvSeries].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetWatchListStatusTvSeries extends _i1.Mock
    implements _i10.GetWatchListStatusTvSeries {
  MockGetWatchListStatusTvSeries() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.TvSeriesRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeTvSeriesRepository_2()) as _i4.TvSeriesRepository);
  @override
  _i5.Future<bool> execute(int? id) =>
      (super.noSuchMethod(Invocation.method(#execute, [id]),
          returnValue: Future<bool>.value(false)) as _i5.Future<bool>);
}

/// A class which mocks [SaveWatchlistTvSeries].
///
/// See the documentation for Mockito's code generation for more information.
class MockSaveWatchlistTvSeries extends _i1.Mock
    implements _i11.SaveWatchlistTvSeries {
  MockSaveWatchlistTvSeries() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.TvSeriesRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeTvSeriesRepository_2()) as _i4.TvSeriesRepository);
  @override
  _i5.Future<_i3.Either<_i8.Failure, String>> execute(
          _i12.TvSeriesDetail? tvSeriesDetail) =>
      (super.noSuchMethod(Invocation.method(#execute, [tvSeriesDetail]),
              returnValue: Future<_i3.Either<_i8.Failure, String>>.value(
                  _FakeEither_1<_i8.Failure, String>()))
          as _i5.Future<_i3.Either<_i8.Failure, String>>);
}

/// A class which mocks [RemoveWatchlistTvSeries].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoveWatchlistTvSeries extends _i1.Mock
    implements _i13.RemoveWatchlistTvSeries {
  MockRemoveWatchlistTvSeries() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.TvSeriesRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeTvSeriesRepository_2()) as _i4.TvSeriesRepository);
  @override
  _i5.Future<_i3.Either<_i8.Failure, String>> execute(
          _i12.TvSeriesDetail? tvSeriesDetail) =>
      (super.noSuchMethod(Invocation.method(#execute, [tvSeriesDetail]),
              returnValue: Future<_i3.Either<_i8.Failure, String>>.value(
                  _FakeEither_1<_i8.Failure, String>()))
          as _i5.Future<_i3.Either<_i8.Failure, String>>);
}
